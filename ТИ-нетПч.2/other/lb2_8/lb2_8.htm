<!-- (C) 2017 Хаджинова Наталья Владимировна, БГУИР -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<title>Лабораторная работа №8 "Архитектура MVC"</title>
</head>

<body>
<div align="center">
  <h1><strong>Лабораторная  работа № 8  &quot;</strong><strong>Архитектура MVC</strong><strong>&quot;</strong></h1>
</div>
<p>Наверняка, во время разбора домашних заданий Вы  замечали, что в некоторых работах код воспринимался легко, а в некоторых был  практически непонятен. Дело здесь не только в аккуратности написания программы,  но и в правильности построения её архитектуры. В этом уроке мы будем учиться  грамотно организовывать программу.</p>
<h2><strong>1. Архитектура программы</strong></h2>
<p>Архитектура - это базовая организация системы,  воплощенная в ее компонентах, их отношениях между собой и с окружением, а также  принципы, определяющие проектирование и развитие системы. [IEEE 1471]<br>
Архитектуру  программы можно разделить на три основные составляющие:</p>
<ol>
  <li>Структура</li>
  <li>Отношения  между компонентами</li>
  <li>Значимые  решения организации</li>
</ol>
<p>Структура &ndash; это разделение кода на компоненты. По  сути, мы решаем, как разбить код на файлы. При выполнении домашнего задания с  предыдущего занятия у вас могла получиться примерно следующая структура:<br>
</p>
<p><img src="structure.png" width="425" height="139"></p>
<p>Под каждую точку входа здесь выделено по одному  файлу, а все полезные функции вынесены в отдельный файл. Это, действительно,  удобно, так как functions.php теперь можно подключать к любой части нашей  программы и использовать написанные в нём функции.<br>
В более  сложном проекте таких файлов с функциями могло бы быть несколько.</p>
<div>
  <p>Отношения &ndash; это способ  взаимодействия созданных компонентов между собой. В описанной выше структуре  чётко прослеживается, какие файлы главные, а какой вспомогательный. index.php и  photo.php &ndash; точки входа, именно в них строится основная логика работы страниц.  А functions.php &ndash; просто библиотека функций, т.е. компонент, который  подчиняется чужим приказам. Его задача просто принять в точке входа команду на  определённое действие и вернуть результат.<br>
    При  создании структуры сразу продумываются связи между её компонентами.<br>
    Значимые решения организации &ndash; это решения,  направленные на организацию программы, а не на проблемы, решаемые с ее помощью.  По сути, это просто продумывание первых двух пунктов архитектуры.<br>
  Не имея  опыта разработки, очень сложно с ходу придумать хорошую архитектуру. Да и ни</p>
  <ul>
    <li>чему. Существуют типовые  архитектурные решения, которые называются шаблонами проектирования. С одним из  них мы и познакомимся в этом уроке.</li>
  </ul>
  <h2>2. <strong>Архитектура MVC</strong></h2>
  <p>Архитектура MVC является самым распространённым  шаблоном проектирования веб-приложений. Её суть заключается в разделении всех  компонент системы на три группы: контроллеры, модели и представления (или  вьюшки, от англ. view). Отсюда и аббревиатура: Model-View-Controller.<br>
  Архитектура MVC может принимать различный вид в  зависимости от языка программирования и решаемой задачи. Нас будет интересовать  взаимодействие её компонент только применительно к веб-программированию.  Схематично это можно изобразить следующим образом:</p>
</div>
<div>
  <p><img src="mvc.png" width="639" height="358"></p>
  <p>Разберём эти компоненты подробнее.</p>
  <p><strong>Контроллер </strong>принимает запрос,<strong> </strong>анализирует,<strong> </strong>чего  вообще хочет пользователь и управляет<strong> </strong>логикой  работы всей программы.</p>
  <p><strong>Модель </strong>&ndash;<strong> </strong>библиотека с функциями.<strong> </strong>Она изолирована от внешнего мира,<strong> </strong>т.е.,<strong> </strong>сама не<strong> </strong>копается в  массивах GET и POST и, что очень важно, ничего не выводит на экран. Задача  модели &ndash; просто принять от контроллера команду и вернуть результат.</p>
  <p><strong>Представление </strong>&ndash;  HTML-код с небольшими вставками<strong> </strong>PHP.</p>
  <p>Зачем же введено такое разделение? Дело в том, что  в более-менее сложных системах очень важно разделять основную логику работы и  решение мелких попутных задач. Модель становится набором решений таких задач,  и, благодаря этому, в контроллере остаются только те действия, которые  определяют логику работы страницы. HTML-код вынесен в представления также с  целью разгрузки контроллера от кода.</p>
  <p>Ниже  приведена диаграмма последовательности работы всех компонент:</p>
</div>
<div>
  <p><img src="uml.png" width="639" height="588"></p>
  <p>Например, попробуем перенести на данную диаграмму логику работы главной  страницы галереи фотографий. Пользователь может попасть на неё двумя способами:  GET и POST.</p>
  <ul>
    <li>первом случае он просто  просматривает картинку, во втором - загружает новое изображение на сервер.  Поэтому, первое, на что смотрит контроллер &ndash; это метод запроса.</li>
  </ul>
  <p>Схема  работы при методе GET:<br>
  </p>
  <p><img src="get.png" width="598" height="380"></p>
  <p>&nbsp;</p>
  <p>Схема  запроса при методе POST:<br>
</p>
</div>
<p><img src="post.png" width="576" height="366"></p>
<p>Ещё раз поясним, зачем же введено данное дробление  на компоненты. Помимо уменьшения строк кода в контроллере, данный приём  позволяет разделить HTML и PHP-код. Это очень важно при командной разработке,  когда программированием и вёрсткой могут заниматься разные люди.<br>
Сейчас обязательно скачайте и изучите исходники к  уроку. В них находится основной каркас реализации галереи, которую мы  обсуждали, построенный с помощью шаблона проектирования MVC.</p>
<h2><strong>Контроль</strong></h2>
<ol>
  <li>Что такое  архитектура программы </li>
  <li>Зачем  продумывать архитектуру </li>
  <li>Из каких  основных частей состоит архитектура </li>
  <li>Что такое  связи между компонентами </li>
  <li>Что такое  шаблон проектирования </li>
  <li>За что  отвечает контроллер </li>
  <li>За что  отвечает модель </li>
  <li>За что  отвечает представление </li>
  <li>Зачем  введено такое разделение кода на части </li>
</ol>
<h2><strong>Задание</strong></h2>
<p>Переделать галерею фотографий в соответствии с правилами шаблона  проектирования MVC.<br>
Как известно, для SEO-продвижения важно, чтобы у картинок на сайте были  указаны атрибуты title и alt. Необходимо добавить в БД поля, позволяющие  хранить данные значения и сделать страницу edit.php, на которой пользователь  сможет их редактировать.</p>
